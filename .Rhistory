qqnorm(stdres, main="Normal Q-Q Plot of Std Residuals")
qqline(stdres, col=4)
fit_2<-Arima(lis_disembark_filt_transf,order = c(2,1,1),
seasonal=list(order=c(0,1,1),
period=12))
fit_2
# check p-value for the Box-Ljung test
Box.test(residuals(fit_2), lag=12, fitdf=4, type="Ljung") # fitdf = p + q + p_s + q_s
# because the p-value is above 0.05 we can reject the null hypothesis and conclude that the residuals are independent
tsdiag(fit_2) # check the 3 plot of the residuals
# ljung-box - accumulated autocorrelation should be all above 0.05
par(mfrow = c(1,1))
plot(as.vector(fitted(fit_2)), as.vector(residuals(fit_2)))
fit_3<-Arima(lis_disembark_filt_transf,order = c(3,1,1),
seasonal=list(order=c(0,1,1),
period=12))
fit_3
# check p-value for the Box-Ljung test
Box.test(residuals(fit_3), lag=12, fitdf=5, type="Ljung") # fitdf = p + q + p_s + q_s
# because the p-value is above 0.05 we can reject the null hypothesis and conclude that the residuals are independent
tsdiag(fit_3) # check the 3 plot of the residuals
# ljung-box - accumulated autocorrelation should be all above 0.05
par(mfrow = c(1,1))
plot(as.vector(fitted(fit_3)), as.vector(residuals(fit_3)))
plot(forecast(fit, h=60))
# plot the series
plot.ts(
lis_airport_disembark_ts,
ylim = c(0, 2500000)
)
lines(InvBoxCox(forecast(fit, h=60)$mean ,lambda=lambda), col = 4, lwd = 3)
lines(InvBoxCox(forecast(fit, level = 95, h=60)$lower ,lambda=lambda), col = 2, lwd = 0.5)
lines(InvBoxCox(forecast(fit, level = 95, h=60)$upper ,lambda=lambda), col = 2, lwd = 0.5)
fit_auto <- auto.arima(lis_disembark_filt_transf)
fit_auto
tsdiag(fit_auto) # check the 3 plot of the residuals
# ljung-box - accumulated autocorrelation should be all above 0.05
plot(as.vector(fitted(fit_auto)), as.vector(residuals(fit_auto)))
knitr::opts_chunk$set(echo = FALSE) # echo=FALSE won't print code to the outpu file
library(fpp)
library(fma)
library(readr)
# add plot showing the data issues here
# load the data
lisbon_airport_disembark <- read_delim("ine_lisbon_disembarked_passengers.csv",
delim = ";",
escape_double = FALSE,
trim_ws = TRUE,
col_types = cols(value = col_number())
)
# turn data into a time series
lis_airport_disembark_ts <- ts(
lisbon_airport_disembark$value,
start = 2004,       # either provide the start or the end
frequency = 12      # if we don't provide start and end, we need a frequency
)
# plot the series
plot.ts(lis_airport_disembark_ts,
main="Passenger Arrivals to the Lisbon Airport from 2004 to August 2024",
xlab="Time",
ylab="# of Passengers"
)
# create window until 2020
lis_disembark_filt <-  window(               # cuts the time series to a portion. use this to exclude long cycles
lis_airport_disembark_ts,
start = 2004,
end = 2020
)
# plot the series
plot.ts(lis_disembark_filt,
main="Passenger Arrivals to the Lisbon Airport from 2004 to 2020",
xlab="Time",
ylab="# of Passengers")
tsdisplay (   # Plots a time series along with its acf and either its pacf, lagged scatterplot or spectrum
lis_disembark_filt,
plot.type="scatter",    # we can choose pacf, lagged scatterplot or spectrum
main="Passenger Arrivals to the Lisbon Airport - tsdisplay plot"
)
lis_airport_disembark_decomp <- decompose(
lis_disembark_filt,
type = "multiplicative"
)
plot(lis_airport_disembark_decomp)
lambda <- BoxCox.lambda(lis_disembark_filt)
lambda
lis_disembark_filt_transf <- BoxCox(lis_disembark_filt, lambda = lambda)
plot.ts(lis_disembark_filt_transf)
# handle trend by taking the first difference
lis_disembark_filt_transf_diff1 <- diff(lis_disembark_filt_transf, 1)
plot(lis_disembark_filt_transf_diff1)
# inspect non-seasonal components
par(mfrow = c(1,2))
acf(lis_disembark_filt_transf_diff1, main="ACF")
pacf(lis_disembark_filt_transf_diff1, main="PACF")
par(mfrow = c(1,1))
monthplot(lis_disembark_filt_transf_diff1,
main = "Seasonal Deviation plot (post Box-Cox transform and Differencing)",
ylab = "",
xlab = "Month"
)
lis_disembark_filt_transf_diff1_diff12 <- diff(lis_disembark_filt_transf_diff1, 12)
plot(lis_disembark_filt_transf_diff1_diff12,
main = "Passenger Arrivals to the Lisbon Airport - post Transformations",
ylab = "",
xlab = "Time"
)
kpss.test(lis_disembark_filt_transf_diff1_diff12, null="T")
# inspect non-seasonal components
par(mfrow = c(1,2))
acf(lis_disembark_filt_transf_diff1_diff12, main = "ACF")
pacf(lis_disembark_filt_transf_diff1_diff12, main = "PACF")
par(mfrow = c(1,1))
# inspect non-seasonal components
par(mfrow = c(1,2))
acf(lis_disembark_filt_transf_diff1_diff12, main = "ACF")
pacf(lis_disembark_filt_transf_diff1_diff12, main = "PACF")
par(mfrow = c(1,1))
# inspect seasonal components
par(mfrow = c(1,2))
acf(lis_disembark_filt_transf_diff1_diff12, 48, main = "ACF")
pacf(lis_disembark_filt_transf_diff1_diff12, 48, main = "PACF")
par(mfrow = c(1,1))
fit<-Arima(lis_disembark_filt_transf,order = c(0,1,1),
seasonal=list(order=c(0,1,1),
period=12))
fit
tsdiag(fit) # check the 3 plot of the residuals
# ljung-box - accumulated autocorrelation should be all above 0.05
par(mfrow = c(1,1))
plot(as.vector(fitted(fit)), as.vector(residuals(fit)),
ylab = "Residuals",
xlab = "Fitted Values")
# check p-value for the Box-Ljung test
Box.test(residuals(fit), lag=12, fitdf=2, type="Ljung") # fitdf = p + q + p_s + q_s
# because the p-value is above 0.05 we can reject the null hypothesis and conclude that the residuals are independent
rs <- fit$residuals
stdres <- rs/sqrt(fit$sigma2)
qqnorm(stdres, main="Normal Q-Q Plot of Std Residuals")
qqline(stdres, col=4)
fit_2<-Arima(lis_disembark_filt_transf,order = c(2,1,1),
seasonal=list(order=c(0,1,1),
period=12))
fit_2
# check p-value for the Box-Ljung test
Box.test(residuals(fit_2), lag=12, fitdf=4, type="Ljung") # fitdf = p + q + p_s + q_s
# because the p-value is above 0.05 we can reject the null hypothesis and conclude that the residuals are independent
tsdiag(fit_2) # check the 3 plot of the residuals
# ljung-box - accumulated autocorrelation should be all above 0.05
par(mfrow = c(1,1))
plot(as.vector(fitted(fit_2)), as.vector(residuals(fit_2)))
fit_3<-Arima(lis_disembark_filt_transf,order = c(3,1,1),
seasonal=list(order=c(0,1,1),
period=12))
fit_3
# check p-value for the Box-Ljung test
Box.test(residuals(fit_3), lag=12, fitdf=5, type="Ljung") # fitdf = p + q + p_s + q_s
# because the p-value is above 0.05 we can reject the null hypothesis and conclude that the residuals are independent
tsdiag(fit_3) # check the 3 plot of the residuals
# ljung-box - accumulated autocorrelation should be all above 0.05
par(mfrow = c(1,1))
plot(as.vector(fitted(fit_3)), as.vector(residuals(fit_3)))
plot(forecast(fit, h=60))
# plot the series
plot.ts(
lis_airport_disembark_ts,
ylim = c(0, 2500000)
)
lines(InvBoxCox(forecast(fit, h=60)$mean ,lambda=lambda), col = 4, lwd = 3)
lines(InvBoxCox(forecast(fit, level = 95, h=60)$lower ,lambda=lambda), col = 2, lwd = 0.5)
lines(InvBoxCox(forecast(fit, level = 95, h=60)$upper ,lambda=lambda), col = 2, lwd = 0.5)
fit_auto <- auto.arima(lis_disembark_filt_transf)
fit_auto
tsdiag(fit_auto) # check the 3 plot of the residuals
# ljung-box - accumulated autocorrelation should be all above 0.05
plot(as.vector(fitted(fit_auto)), as.vector(residuals(fit_auto)))
fit<-Arima(lis_disembark_filt_transf,order = c(0,1,1),
seasonal=list(order=c(0,1,1),
period=12))
fit
tsdiag(fit) # check the 3 plot of the residuals
# ljung-box - accumulated autocorrelation should be all above 0.05
par(mfrow = c(1,1))
plot(as.vector(fitted(fit)), as.vector(residuals(fit)),
ylab = "Residuals",
xlab = "Fitted Values")
abline(h=0)
# check p-value for the Box-Ljung test
Box.test(residuals(fit), lag=12, fitdf=2, type="Ljung") # fitdf = p + q + p_s + q_s
# because the p-value is above 0.05 we can reject the null hypothesis and conclude that the residuals are independent
rs <- fit$residuals
stdres <- rs/sqrt(fit$sigma2)
qqnorm(stdres, main="Normal Q-Q Plot of Std Residuals")
qqline(stdres, col=4)
# plot the series
plot.ts(
lis_airport_disembark_ts,
ylim = c(0, 2500000),
main = "Passenger Arrivals to the Lisbon Airport from 2004 to August 2024: Forecast vs Observed Values"
)
lines(InvBoxCox(forecast(fit, h=60)$mean ,lambda=lambda), col = 4, lwd = 3)
lines(InvBoxCox(forecast(fit, level = 95, h=60)$lower ,lambda=lambda), col = 2, lwd = 0.5)
lines(InvBoxCox(forecast(fit, level = 95, h=60)$upper ,lambda=lambda), col = 2, lwd = 0.5)
# plot the series
plot.ts(
lis_airport_disembark_ts,
ylim = c(0, 2500000),
main = "Passenger Arrivals to the Lisbon Airport 2004 to 2024: Forecast vs Observed Values"
)
lines(InvBoxCox(forecast(fit, h=60)$mean ,lambda=lambda), col = 4, lwd = 3)
lines(InvBoxCox(forecast(fit, level = 95, h=60)$lower ,lambda=lambda), col = 2, lwd = 0.5)
lines(InvBoxCox(forecast(fit, level = 95, h=60)$upper ,lambda=lambda), col = 2, lwd = 0.5)
# plot the series
plot.ts(
lis_airport_disembark_ts,
ylim = c(0, 2500000),
main = "Passenger Arrivals to the Lisbon Airport: Forecast vs Observed Values"
)
lines(InvBoxCox(forecast(fit, h=60)$mean ,lambda=lambda), col = 4, lwd = 3)
lines(InvBoxCox(forecast(fit, level = 95, h=60)$lower ,lambda=lambda), col = 2, lwd = 0.5)
lines(InvBoxCox(forecast(fit, level = 95, h=60)$upper ,lambda=lambda), col = 2, lwd = 0.5)
# plot the series
plot.ts(
lis_airport_disembark_ts,
ylim = c(0, 2500000),
main = "Passenger Arrivals to the Lisbon Airport: Forecast vs Observed Values",
ylab = "# of Passengers",
xlab = "Time"
)
lines(InvBoxCox(forecast(fit, h=60)$mean ,lambda=lambda), col = 4, lwd = 3)
lines(InvBoxCox(forecast(fit, level = 95, h=60)$lower ,lambda=lambda), col = 2, lwd = 0.5)
lines(InvBoxCox(forecast(fit, level = 95, h=60)$upper ,lambda=lambda), col = 2, lwd = 0.5)
knitr::opts_chunk$set(echo = FALSE) # echo=FALSE won't print code to the outpu file
library(fpp)
library(fma)
library(readr)
# add plot showing the data issues here
# load the data
lisbon_airport_disembark <- read_delim("ine_lisbon_disembarked_passengers.csv",
delim = ";",
escape_double = FALSE,
trim_ws = TRUE,
col_types = cols(value = col_number())
)
# turn data into a time series
lis_airport_disembark_ts <- ts(
lisbon_airport_disembark$value,
start = 2004,       # either provide the start or the end
frequency = 12      # if we don't provide start and end, we need a frequency
)
# plot the series
plot.ts(lis_airport_disembark_ts,
main="Passenger Arrivals to the Lisbon Airport from 2004 to August 2024",
xlab="Time",
ylab="# of Passengers"
)
# create window until 2020
lis_disembark_filt <-  window(               # cuts the time series to a portion. use this to exclude long cycles
lis_airport_disembark_ts,
start = 2004,
end = 2020
)
# plot the series
plot.ts(lis_disembark_filt,
main="Passenger Arrivals to the Lisbon Airport from 2004 to 2020",
xlab="Time",
ylab="# of Passengers")
tsdisplay (   # Plots a time series along with its acf and either its pacf, lagged scatterplot or spectrum
lis_disembark_filt,
plot.type="scatter",    # we can choose pacf, lagged scatterplot or spectrum
main="Passenger Arrivals to the Lisbon Airport - tsdisplay plot"
)
lis_airport_disembark_decomp <- decompose(
lis_disembark_filt,
type = "multiplicative"
)
plot(lis_airport_disembark_decomp)
lambda <- BoxCox.lambda(lis_disembark_filt)
lambda
lis_disembark_filt_transf <- BoxCox(lis_disembark_filt, lambda = lambda)
plot.ts(lis_disembark_filt_transf)
# handle trend by taking the first difference
lis_disembark_filt_transf_diff1 <- diff(lis_disembark_filt_transf, 1)
plot(lis_disembark_filt_transf_diff1)
# inspect non-seasonal components
par(mfrow = c(1,2))
acf(lis_disembark_filt_transf_diff1, main="ACF")
pacf(lis_disembark_filt_transf_diff1, main="PACF")
par(mfrow = c(1,1))
monthplot(lis_disembark_filt_transf_diff1,
main = "Seasonal Deviation plot (post Box-Cox transform and Differencing)",
ylab = "",
xlab = "Month"
)
lis_disembark_filt_transf_diff1_diff12 <- diff(lis_disembark_filt_transf_diff1, 12)
plot(lis_disembark_filt_transf_diff1_diff12,
main = "Passenger Arrivals to the Lisbon Airport - post Transformations",
ylab = "",
xlab = "Time"
)
kpss.test(lis_disembark_filt_transf_diff1_diff12, null="T")
# inspect non-seasonal components
par(mfrow = c(1,2))
acf(lis_disembark_filt_transf_diff1_diff12, main = "ACF")
pacf(lis_disembark_filt_transf_diff1_diff12, main = "PACF")
par(mfrow = c(1,1))
# inspect non-seasonal components
par(mfrow = c(1,2))
acf(lis_disembark_filt_transf_diff1_diff12, main = "ACF")
pacf(lis_disembark_filt_transf_diff1_diff12, main = "PACF")
par(mfrow = c(1,1))
# inspect seasonal components
par(mfrow = c(1,2))
acf(lis_disembark_filt_transf_diff1_diff12, 48, main = "ACF")
pacf(lis_disembark_filt_transf_diff1_diff12, 48, main = "PACF")
par(mfrow = c(1,1))
fit<-Arima(lis_disembark_filt_transf,order = c(0,1,1),
seasonal=list(order=c(0,1,1),
period=12))
fit
tsdiag(fit) # check the 3 plot of the residuals
# ljung-box - accumulated autocorrelation should be all above 0.05
par(mfrow = c(1,1))
plot(as.vector(fitted(fit)), as.vector(residuals(fit)),
ylab = "Residuals",
xlab = "Fitted Values")
abline(h=0)
# check p-value for the Box-Ljung test
Box.test(residuals(fit), lag=12, fitdf=2, type="Ljung") # fitdf = p + q + p_s + q_s
# because the p-value is above 0.05 we can reject the null hypothesis and conclude that the residuals are independent
rs <- fit$residuals
stdres <- rs/sqrt(fit$sigma2)
qqnorm(stdres, main="Normal Q-Q Plot of Std Residuals")
qqline(stdres, col=4)
fit_2<-Arima(lis_disembark_filt_transf,order = c(2,1,1),
seasonal=list(order=c(0,1,1),
period=12))
fit_2
# check p-value for the Box-Ljung test
Box.test(residuals(fit_2), lag=12, fitdf=4, type="Ljung") # fitdf = p + q + p_s + q_s
# because the p-value is above 0.05 we can reject the null hypothesis and conclude that the residuals are independent
tsdiag(fit_2) # check the 3 plot of the residuals
# ljung-box - accumulated autocorrelation should be all above 0.05
par(mfrow = c(1,1))
plot(as.vector(fitted(fit_2)), as.vector(residuals(fit_2)))
fit_3<-Arima(lis_disembark_filt_transf,order = c(3,1,1),
seasonal=list(order=c(0,1,1),
period=12))
fit_3
# check p-value for the Box-Ljung test
Box.test(residuals(fit_3), lag=12, fitdf=5, type="Ljung") # fitdf = p + q + p_s + q_s
# because the p-value is above 0.05 we can reject the null hypothesis and conclude that the residuals are independent
tsdiag(fit_3) # check the 3 plot of the residuals
# ljung-box - accumulated autocorrelation should be all above 0.05
par(mfrow = c(1,1))
plot(as.vector(fitted(fit_3)), as.vector(residuals(fit_3)))
plot(forecast(fit, h=60))
# plot the series
plot.ts(
lis_airport_disembark_ts,
ylim = c(0, 2500000),
main = "Passenger Arrivals to the Lisbon Airport: Forecast vs Observed Values",
ylab = "# of Passengers",
xlab = "Time"
)
lines(InvBoxCox(forecast(fit, h=60)$mean ,lambda=lambda), col = 4, lwd = 3)
lines(InvBoxCox(forecast(fit, level = 95, h=60)$lower ,lambda=lambda), col = 2, lwd = 0.5)
lines(InvBoxCox(forecast(fit, level = 95, h=60)$upper ,lambda=lambda), col = 2, lwd = 0.5)
fit_auto <- auto.arima(lis_disembark_filt_transf)
fit_auto
tsdiag(fit_auto) # check the 3 plot of the residuals
# ljung-box - accumulated autocorrelation should be all above 0.05
plot(as.vector(fitted(fit_auto)), as.vector(residuals(fit_auto)))
# inspect seasonal components
par(mfrow = c(1,2))
acf(lis_disembark_filt_transf_diff1_diff12, 48, main = "ACF")
pacf(lis_disembark_filt_transf_diff1_diff12, 48, main = "PACF")
par(mfrow = c(1,1))
knitr::opts_chunk$set(echo = FALSE) # echo=FALSE won't print code to the outpu file
library(fpp)
library(fma)
library(readr)
# load the data
lisbon_airport_disembark <- read_delim("ine_lisbon_disembarked_passengers.csv",
delim = ";",
escape_double = FALSE,
trim_ws = TRUE,
col_types = cols(value = col_number())
)
# turn data into a time series
lis_airport_disembark_ts <- ts(
lisbon_airport_disembark$value,
start = 2004,       # either provide the start or the end
frequency = 12      # if we don't provide start and end, we need a frequency
)
# plot the series
plot.ts(lis_airport_disembark_ts,
main="Passenger Arrivals to the Lisbon Airport from 2004 to August 2024",
xlab="Time",
ylab="# of Passengers"
)
# create window until 2020
lis_disembark_filt <-  window(               # cuts the time series to a portion. use this to exclude long cycles
lis_airport_disembark_ts,
start = 2004,
end = 2020
)
# plot the series
plot.ts(lis_disembark_filt,
main="Passenger Arrivals to the Lisbon Airport from 2004 to 2020",
xlab="Time",
ylab="# of Passengers")
tsdisplay (   # Plots a time series along with its acf and either its pacf, lagged scatterplot or spectrum
lis_disembark_filt,
plot.type="scatter",    # we can choose pacf, lagged scatterplot or spectrum
main="Passenger Arrivals to the Lisbon Airport - tsdisplay plot"
)
lis_airport_disembark_decomp <- decompose(
lis_disembark_filt,
type = "multiplicative"
)
plot(lis_airport_disembark_decomp)
lambda <- BoxCox.lambda(lis_disembark_filt)
lambda
lis_disembark_filt_transf <- BoxCox(lis_disembark_filt, lambda = lambda)
plot.ts(lis_disembark_filt_transf)
# handle trend by taking the first difference
lis_disembark_filt_transf_diff1 <- diff(lis_disembark_filt_transf, 1)
plot(lis_disembark_filt_transf_diff1)
# inspect non-seasonal components
par(mfrow = c(1,2))
acf(lis_disembark_filt_transf_diff1, main="ACF")
pacf(lis_disembark_filt_transf_diff1, main="PACF")
par(mfrow = c(1,1))
monthplot(lis_disembark_filt_transf_diff1,
main = "Seasonal Deviation plot (post Box-Cox transform and Differencing)",
ylab = "",
xlab = "Month"
)
lis_disembark_filt_transf_diff1_diff12 <- diff(lis_disembark_filt_transf_diff1, 12)
plot(lis_disembark_filt_transf_diff1_diff12,
main = "Passenger Arrivals to the Lisbon Airport - post Transformations",
ylab = "",
xlab = "Time"
)
kpss.test(lis_disembark_filt_transf_diff1_diff12, null="T")
# inspect non-seasonal components
par(mfrow = c(1,2))
acf(lis_disembark_filt_transf_diff1_diff12, main = "ACF")
pacf(lis_disembark_filt_transf_diff1_diff12, main = "PACF")
par(mfrow = c(1,1))
# inspect seasonal components
par(mfrow = c(1,2))
acf(lis_disembark_filt_transf_diff1_diff12, 48, main = "ACF")
pacf(lis_disembark_filt_transf_diff1_diff12, 48, main = "PACF")
par(mfrow = c(1,1))
fit<-Arima(lis_disembark_filt_transf,order = c(0,1,1),
seasonal=list(order=c(0,1,1),
period=12))
fit
tsdiag(fit) # check the 3 plot of the residuals
# ljung-box - accumulated autocorrelation should be all above 0.05
par(mfrow = c(1,1))
plot(as.vector(fitted(fit)), as.vector(residuals(fit)),
ylab = "Residuals",
xlab = "Fitted Values")
abline(h=0)
# check p-value for the Box-Ljung test
Box.test(residuals(fit), lag=12, fitdf=2, type="Ljung") # fitdf = p + q + p_s + q_s
# because the p-value is above 0.05 we can reject the null hypothesis and conclude that the residuals are independent
rs <- fit$residuals
stdres <- rs/sqrt(fit$sigma2)
qqnorm(stdres, main="Normal Q-Q Plot of Std Residuals")
qqline(stdres, col=4)
fit_2<-Arima(lis_disembark_filt_transf,order = c(2,1,1),
seasonal=list(order=c(0,1,1),
period=12))
fit_2
# check p-value for the Box-Ljung test
Box.test(residuals(fit_2), lag=12, fitdf=4, type="Ljung") # fitdf = p + q + p_s + q_s
# because the p-value is above 0.05 we can reject the null hypothesis and conclude that the residuals are independent
tsdiag(fit_2) # check the 3 plot of the residuals
# ljung-box - accumulated autocorrelation should be all above 0.05
par(mfrow = c(1,1))
plot(as.vector(fitted(fit_2)), as.vector(residuals(fit_2)))
fit_3<-Arima(lis_disembark_filt_transf,order = c(3,1,1),
seasonal=list(order=c(0,1,1),
period=12))
fit_3
# check p-value for the Box-Ljung test
Box.test(residuals(fit_3), lag=12, fitdf=5, type="Ljung") # fitdf = p + q + p_s + q_s
# because the p-value is above 0.05 we can reject the null hypothesis and conclude that the residuals are independent
tsdiag(fit_3) # check the 3 plot of the residuals
# ljung-box - accumulated autocorrelation should be all above 0.05
par(mfrow = c(1,1))
plot(as.vector(fitted(fit_3)), as.vector(residuals(fit_3)))
plot(forecast(fit, h=60))
# plot the series
plot.ts(
lis_airport_disembark_ts,
ylim = c(0, 2500000),
main = "Passenger Arrivals to the Lisbon Airport: Forecast vs Observed Values",
ylab = "# of Passengers",
xlab = "Time"
)
lines(InvBoxCox(forecast(fit, h=60)$mean ,lambda=lambda), col = 4, lwd = 3)
lines(InvBoxCox(forecast(fit, level = 95, h=60)$lower ,lambda=lambda), col = 2, lwd = 0.5)
lines(InvBoxCox(forecast(fit, level = 95, h=60)$upper ,lambda=lambda), col = 2, lwd = 0.5)
fit_auto <- auto.arima(lis_disembark_filt_transf)
fit_auto
tsdiag(fit_auto) # check the 3 plot of the residuals
# ljung-box - accumulated autocorrelation should be all above 0.05
plot(as.vector(fitted(fit_auto)), as.vector(residuals(fit_auto)))
